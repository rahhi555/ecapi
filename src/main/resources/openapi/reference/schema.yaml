openapi: 3.0.0
x-stoplight:
  id: 6qchn1idys5bx
info:
  title: PRUM EC APIスキーマ
  version: '1.0'
  description: PRUM ECのAPIスキーマです
  contact:
    name: rahhi555
servers:
  - url: 'http://localhost:8080'
tags:
  - name: opts
    description: 運用監視関連のAPI
  - name: users
    description: ユーザー関連のAPI
  - name: auth
    description: 認証関連のAPI
  - name: products
    description: 商品関連のAPI
paths:
  /health:
    get:
      tags:
        - opts
      summary: ヘルスチェック
      operationId: healthCheck
      description: ヘルスチェック
      responses:
        '200':
          description: OK
  '/users/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ユーザーid
    get:
      summary: ユーザー取得
      tags:
        - users
      operationId: getUser
      description: idからユーザーを取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOUser'
      security:
        - BearerAuth: []
  /users/me:
    get:
      summary: ログイン中ユーザー取得
      tags:
        - users
      operationId: getMe
      description: ログイン中のユーザーを取得する
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOUser'
  /auth/register:
    post:
      summary: ユーザー登録
      tags:
        - auth
      operationId: authRegister
      description: ユーザー登録する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormRegister'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOAuthentication'
  /auth/authenticate:
    post:
      summary: ログイン
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOLogin'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
      tags:
        - auth
      description: ログイン
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormAuthenticate'
        required: true
  /products:
    get:
      summary: 商品一覧取得
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOProduct'
      operationId: getProducts
      description: 商品一覧取得
      security:
        - BearerAuth: []
    parameters: []
    post:
      summary: 商品登録
      tags:
        - products
      operationId: addProduct
      description: 商品登録
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormProduct'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOProduct'
components:
  schemas:
    DTOUser:
      title: DTOUser
      x-stoplight:
        id: 9b10079769aaa
      type: object
      description: ユーザー情報
      properties:
        id:
          type: integer
          description: ユーザーid
          example: 1
        firstname:
          type: string
          description: 名前
          example: 太郎
          minLength: 1
        lastname:
          type: string
          description: 名字
          example: 太郎
          minLength: 1
        email:
          type: string
          description: メールアドレス
          example: test@example.com
          format: email
        role:
          $ref: '#/components/schemas/EnumRole'
      required:
        - id
        - firstname
        - lastname
        - email
        - role
    DTOAuthentication:
      title: DTOAuthentication
      description: 認証jwt
      type: object
      properties:
        token:
          type: string
          description: 認証jwt
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2ZW5kb3JAZXhhbXBsZS5jb20iLCJpYXQiOjE2OTA3MjAyNjUsImV4cCI6MTY5MDcyMTcwNX0.OG9PfPsWsnqgqu-HDA5tGtXZd98UgMayrpq6ObBbSNA
      required:
        - token
      x-stoplight:
        id: 0aff6be78e7e3
    DTOLogin:
      description: ログイン情報
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2ZW5kb3JAZXhhbXBsZS5jb20iLCJpYXQiOjE2OTA3MjAyNjUsImV4cCI6MTY5MDcyMTcwNX0.OG9PfPsWsnqgqu-HDA5tGtXZd98UgMayrpq6ObBbSNA
          description: 認証jwt
        user:
          $ref: '#/components/schemas/DTOUser'
      required:
        - token
        - user
    DTOProduct:
      title: DTOProduct
      x-stoplight:
        id: fpoef0hrvkk8o
      type: object
      description: 商品情報
      properties:
        id:
          type: integer
          description: 商品主キー
          example: 1
        vendorId:
          type: integer
          description: 商品出品者の主キー
          example: 1
        name:
          type: string
          minLength: 1
          example: Tシャツ
          description: 商品名
        description:
          type: string
          example: かっこいいTシャツです。
          description: 商品説明
        thumbnailUrl:
          type: string
          example: 'https://picsum.photos/200/300'
          description: サムネイル画像URL
        carouselUrls:
          type: array
          description: カルーセル画像URL配列
          items:
            type: string
            example: 'https://picsum.photos/200/300'
        price:
          type: integer
          minimum: 0
          example: 1000
          description: 商品値段
        stock:
          type: integer
          minimum: 0
          example: 3
          description: 在庫
        createdAt:
          type: string
          format: date-time
          example: '2023-07-28T14:15:30.123+0900'
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          example: '2023-07-28T14:15:30.123+0900'
          description: 更新日時
      required:
        - id
        - vendorId
        - name
        - price
        - stock
        - createdAt
        - updatedAt
    FormRegister:
      title: FormRegister
      x-stoplight:
        id: 02be447f649a0
      type: object
      description: ユーザー登録フォーム
      properties:
        email:
          type: string
          format: email
          example: test@example.com
          description: メールアドレス
        password:
          type: string
          format: password
          example: password
          description: パスワード
        firstname:
          type: string
          example: 太郎
          minLength: 1
          description: 名前
        lastname:
          type: string
          example: 田中
          minLength: 1
          description: 名字
        role:
          $ref: '#/components/schemas/EnumRole'
      required:
        - email
        - password
        - firstname
        - lastname
        - role
    FormAuthenticate:
      title: FormAuthenticate
      x-stoplight:
        id: jfx7vquhdpnwn
      type: object
      description: ユーザーログインフォーム
      properties:
        email:
          type: string
          format: email
          minLength: 1
          example: test@example.com
          description: メールアドレス
        password:
          type: string
          format: password
          minLength: 1
          example: password
          description: パスワード
        role:
          $ref: '#/components/schemas/EnumRole'
      required:
        - email
        - password
        - role
    FormProduct:
      title: FormProduct
      x-stoplight:
        id: fc4de5426c90e
      type: object
      description: 商品登録フォーム
      properties:
        vendorId:
          type: integer
          description: 商品出品者の主キー
          example: 1
        name:
          type: string
          minLength: 1
          example: Tシャツ
          description: 商品名
        description:
          type: string
          example: かっこいいTシャツです。
          description: 商品説明
        thumbnailUrl:
          type: string
          example: 'https://picsum.photos/200/300'
          description: サムネイル画像URL
        carouselUrls:
          type: array
          description: カルーセル画像URL配列
          items:
            type: string
            example: 'https://picsum.photos/200/300'
        price:
          type: integer
          minimum: 0
          example: 1000
          description: 商品値段
        stock:
          type: integer
          example: 3
          minimum: 0
          description: 在庫
      required:
        - vendorId
        - name
        - price
        - stock
    EnumRole:
      title: EnumRole
      x-stoplight:
        id: b30130640ee35
      type: string
      enum:
        - VENDOR
        - CUSTOMER
      default: CUSTOMER
      example: VENDOR
      description: 'ユーザー権限(販売者:VENDOR,購入者:CUSTOMER)'
    ErrorBase:
      title: ErrorBase
      description: エラーレスポンス
      type: object
      properties:
        title:
          type: string
          description: エラーのタイトル
          example: Bad Request
        detail:
          type: string
          description: エラーの詳細
          example: リクエストが不正です。正しいリクエストでリトライしてください
        invalidParams:
          type: array
          items:
            description: 不正なリクエストについての詳細
            type: object
            properties:
              name:
                type: string
                description: エラーが発生したフィールド名
                example: title
              reason:
                type: string
                description: エラー詳細
                example: 値が空白です
            required:
              - name
              - reason
      required:
        - title
        - detail
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: JWT認証
      bearerFormat: JWT
